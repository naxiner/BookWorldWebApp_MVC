// <auto-generated />
using BookWorld.DataAcess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BookWorld.DataAcess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231008104345_addProductsToDb")]
    partial class addProductsToDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BookWorld.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(24)
                        .HasColumnType("nvarchar(24)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DisplayOrder = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            DisplayOrder = 2,
                            Name = "Detective"
                        },
                        new
                        {
                            Id = 3,
                            DisplayOrder = 3,
                            Name = "History"
                        });
                });

            modelBuilder.Entity("BookWorld.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ISBN")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ListPrice")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Price100")
                        .HasColumnType("float");

                    b.Property<double>("Price50")
                        .HasColumnType("float");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Author = "Артур Конан Дойль",
                            Description = "Збірка захоплюючих детективних розслідувань відомого сищика Шерлока Холмса та його надільного друга Доктора Ватсона.",
                            ISBN = "978-0486223757",
                            ListPrice = 12.99,
                            Price = 12.99,
                            Price100 = 10.0,
                            Price50 = 11.5,
                            Title = "Пригоди Шерлока Холмса"
                        },
                        new
                        {
                            Id = 2,
                            Author = "Джордж Орвелл",
                            Description = "Антиутопічний роман, який описує життя в тоталітарному суспільстві, де кожен рух та слово контролюються державою.",
                            ISBN = "978-0451524935",
                            ListPrice = 14.99,
                            Price = 14.99,
                            Price100 = 12.0,
                            Price50 = 13.5,
                            Title = "1984"
                        },
                        new
                        {
                            Id = 3,
                            Author = "Джордж Р. Р. Мартін",
                            Description = "Епічна фентезі-сага про боротьбу за владу в країні Вестерос.",
                            ISBN = "978-0553103540",
                            ListPrice = 18.989999999999998,
                            Price = 18.989999999999998,
                            Price100 = 15.0,
                            Price50 = 17.0,
                            Title = "Гра престолів"
                        },
                        new
                        {
                            Id = 4,
                            Author = "Дж. К. Роулінг",
                            Description = "Початок пригод молодого чаклуна Гаррі Поттера в чарівному світі.",
                            ISBN = "978-0590353403",
                            ListPrice = 16.989999999999998,
                            Price = 16.989999999999998,
                            Price100 = 13.5,
                            Price50 = 15.0,
                            Title = "Гаррі Поттер і Філософський камінь"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
